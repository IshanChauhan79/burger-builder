{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","className","classes","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","order","id","loading","Spinner","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,gHCgCXC,EA/BD,SAACC,GACX,IAAMC,EAAY,GAClB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KAAK,CACbC,KAAKF,EACLG,OAAOL,EAAMC,YAAYC,KAGjC,IAAMI,EAAkBL,EAAYM,KAAI,SAAAC,GACpC,OACI,uBACIC,MAAO,CACHC,cAAc,aACdC,QAAQ,eACRC,OAAO,QACPC,OAAO,iBACPC,QAAQ,OANhB,cAUGN,EAAGJ,KAVN,KAUcI,EAAGH,SAFRG,EAAGJ,SAKpB,OACI,sBAAKW,UAAWC,IAAQjB,MAAxB,UACI,8CAAiBO,KACjB,wCAAU,uCAAUW,OAAOC,WAAWlB,EAAMmB,OAAOC,QAAQ,a,gCCnBjEC,E,kLAOEC,KAAKtB,MAAMuB,cAAcD,KAAKtB,MAAMwB,MAAMF,KAAKtB,MAAMyB,U,+BAoBrD,IAAIC,EAAOJ,KAAKtB,MAAM0B,OAAOnB,KAAI,SAAAoB,GAAK,OAC9B,cAAC,EAAD,CAEI1B,YAAa0B,EAAM1B,YACnBkB,OAAQQ,EAAMR,OAFTQ,EAAMC,OAOvB,OAHIN,KAAKtB,MAAM6B,UACXH,EAAO,cAACI,EAAA,EAAD,KAGP,8BACKJ,Q,GAtCIK,aA2DNC,uBAdQ,SAAAC,GACnB,MAAM,CACFP,OAAOO,EAAMN,MAAMD,OACnBG,QAAQI,EAAMN,MAAME,QACpBL,MAAMS,EAAMC,KAAKV,MACjBC,OAAOQ,EAAMC,KAAKT,WAGC,SAAAU,GACvB,MAAM,CACFZ,cAAc,SAACC,EAAMC,GAAP,OAAgBU,EAASC,IAAoBZ,EAAMC,QAI1DO,CAA4CK,YAAiBhB,EAAOiB","file":"static/js/5.2605f782.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3otyE\"};","import React from 'react';\r\nimport classes from './Order.module.css'\r\nconst Order = (props) => {\r\n    const ingredients=[];\r\n    for (let ingredientName in props.ingredients){\r\n        ingredients.push({\r\n            name:ingredientName,\r\n            amount:props.ingredients[ingredientName]\r\n        })\r\n    }\r\n    const ingredientOutput =ingredients.map(ig=>{\r\n        return (\r\n            <span \r\n                style={{\r\n                    textTransform:'capitalize',\r\n                    display:'inline-block',\r\n                    margin:'0 8px',\r\n                    border:'1px solid #ccc',\r\n                    padding:'5px'\r\n                }}\r\n                key={ig.name}\r\n\r\n            > {ig.name}: {ig.amount}</span>)\r\n    })\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredients: {ingredientOutput}</p>\r\n            <p>Price: <strong>${Number.parseFloat(props.price).toFixed(2)}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Order;\r\n","import React , {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../store/actions/index';\r\n\r\n\r\nclass Orders extends Component {\r\n    // state={\r\n    //     orders:[],\r\n    //     loading:true\r\n    // }\r\n\r\n    componentDidMount(){\r\n        this.props.onFetchOrders(this.props.token,this.props.userId);\r\n        // axios.get('./orders.json')\r\n        //     .then(res => {\r\n        //         const fetchOrders=[]\r\n        //         for (let key in res.data){\r\n        //             fetchOrders.push({\r\n        //                 ...res.data[key],\r\n        //                 id:key\r\n        //             });\r\n        //         }\r\n        //         this.setState({loading:false,orders:fetchOrders});\r\n\r\n        //     })\r\n        //     .catch(err => {\r\n        //         this.setState({loading:false});\r\n\r\n        //     })\r\n    }\r\n\r\n    render(){\r\n        let orders=this.props.orders.map(order => (\r\n                <Order \r\n                    key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={+order.price}         \r\n                />))\r\n        if (this.props.loading){\r\n            orders=<Spinner />\r\n        }\r\n        return(\r\n            <div>\r\n                {orders}\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nconst mapStateToprops= state =>{\r\n    return{\r\n        orders:state.order.orders,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onFetchOrders:(token,userId)=>dispatch(actions.fetchOrders(token,userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToprops,mapDispatchToProps)(withErrorHandler(Orders,axios));\r\n"],"sourceRoot":""}