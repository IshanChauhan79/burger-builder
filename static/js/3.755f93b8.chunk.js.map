{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangeHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputIdentifiers","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","module","exports"],"mappings":"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","file":"static/js/3.755f93b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst CheckoutSummary = (props) =>{\r\n    return(\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope you like the burger</h1>\r\n            <div style={{width:'100%',margin:'0px'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}\r\n            >CANCEL</Button>\r\n\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}\r\n            >CONTINUE</Button>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default CheckoutSummary;","\r\nimport React,{Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport axios from '../../../axios-orders.js';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport {updateObject,checkValidity} from '../../../shared/utility'\r\n\r\nclass ContactData extends Component{\r\n    state={\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        loading:false\r\n    }\r\n\r\n    orderHandler=(event)=>{\r\n        event.preventDefault();\r\n        // console.log(this.props.ingredients);\r\n        // this.setState({loading:true})\r\n        const formData={};\r\n        for (let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order={\r\n            // ingredients:this.props.ingredients,\r\n            ingredients:this.props.ings,\r\n            price:this.props.price,\r\n            orderData:formData,\r\n            userId:this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order,this.props.token);\r\n        // axios.post('/orders.json',order)\r\n        //     .then(response=>{\r\n        //         this.setState({loading:false});\r\n        //         this.props.history.push('/');\r\n\r\n        //     }\r\n                \r\n        //     )\r\n        //     .catch(err=>\r\n        //         this.setState({loading:false})\r\n        //     );\r\n    }\r\n\r\n    \r\n    inputChangeHandler =(event,inputIdentifier)=>{\r\n        // const updatedOrderForm={\r\n        //     ...this.state.orderForm\r\n        // };\r\n        // const updatedFormElement={\r\n        //     ...updatedOrderForm[inputIdentifier]\r\n        // };\r\n\r\n        \r\n        // updatedFormElement.value=event.target.value;\r\n        // updatedFormElement.touched=true;\r\n        // updatedFormElement.valid=this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n        // updatedOrderForm[inputIdentifier]=updatedFormElement;\r\n\r\n\r\n        const updatedFormElement=updateObject(this.state.orderForm[inputIdentifier],{\r\n            value:event.target.value,\r\n            valid:checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),\r\n            touched:true\r\n        })\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]:updatedFormElement\r\n        })\r\n\r\n\r\n        let formIsValid =true;\r\n        for (let inputIdentifiers in updatedOrderForm){\r\n            formIsValid=updatedOrderForm[inputIdentifiers].valid && formIsValid;\r\n        }\r\n        // console.log(updatedFormElement);\r\n        this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid})\r\n\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray =[];\r\n        for (let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n        let form=(\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement =>(\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType} \r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        touched={formElement.config.touched}\r\n                        shouldValidate={formElement.config.validation}\r\n                        changed={(event)=>this.inputChangeHandler(event,formElement.id)} />\r\n                ))}\r\n                {/* <Input elementType='...' elemetConfig='...' value=''/> */}\r\n                {/* <Input  inputtype='input' type='text' label='Name'  name=\"name\" placeholder=\"Your Name\" /> */}\r\n                \r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>);\r\n        if (this.props.loading){\r\n            form=<Spinner />\r\n            }\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        price:state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));\r\n","import React ,{Component} from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {Redirect, Route} from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\n// import * as actions from '../../store/actions/index';\r\n\r\nclass Checkout extends Component{\r\n    // state={\r\n    //     ingredients:null,\r\n    //     price:0\r\n    // }\r\n    // componentWillMount(){\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n        \r\n    //     const ingredients={};\r\n    //     let price=0;\r\n    //     for (let param of query.entries()){\r\n    //         // console.log(param[1]);\r\n    //         //[salad , 1 , meat , 2 , ...]\r\n    //         if (param[0]==='price'){\r\n    //             price=param[1];\r\n\r\n    //         }else{\r\n    //             ingredients[param[0]]=+param[1];\r\n    //         }\r\n            \r\n    //     }\r\n    //     this.setState({ingredients:ingredients,price:price})\r\n    // }\r\n\r\n    // componentWillMount () {\r\n    //     this.props.onInitPurchase()\r\n    // }\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n\r\n    }\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data')\r\n        \r\n    }\r\n\r\n    render(){\r\n        let summary = <Redirect to='/' />\r\n        const purchasedRedirect=this.props.purchased?<Redirect to='/' />:null;\r\n        if(this.props.ings) {\r\n            summary=(\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler} \r\n                        checkoutContinued={this.checkoutContinuedHandler}/>\r\n                    \r\n                    <Route \r\n                        path={this.props.match.path +'/contact-data'} \r\n                        // render={()=>(<ContactData price={this.props.price} ingredients={this.props.ings} {...this.props} />)}\r\n                        component={ContactData}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n        return summary; \r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        purchased:state.order.purchased\r\n        // price:state.totalPrice\r\n    }\r\n\r\n}\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onInitPurchase:()=>dispatch(actions.purchaseInit())\r\n//     }\r\n// }\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css'\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses=[classes.InputElement]\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case('textarea'):\r\n            inputElement=<textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case('select'):\r\n            inputElement=(\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option=>(\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                    \r\n                </select>)\r\n            break;\r\n        default:\r\n            inputElement=<input  \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />            \r\n    }\r\n    return(\r\n    <div className={classes.Input}>\r\n        {/* <label className={classes.Label}>{props.label}</label> */}\r\n        {inputElement}\r\n        \r\n    </div>\r\n)};\r\n\r\nexport default Input ;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2QJs_\",\"Label\":\"Input_Label__2EYmk\",\"InputElement\":\"Input_InputElement__1yU-b\",\"Invalid\":\"Input_Invalid__3t_mi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3C9nJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2hXQZ\",\"Input\":\"ContactData_Input__339z2\"};"],"sourceRoot":""}