{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangeHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","onSubmitHandler","preventDefault","props","onAuth","switchAuthModeHnadler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMesssage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue"],"mappings":"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","file":"static/js/4.9aea8858.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2uQzk\",\"Input\":\"Auth_Input__2LWSZ\"};","import React, {Component} from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {updateObject,checkValidity} from '../../shared/utility';\r\n\r\n\r\nclass Auth extends Component{\r\n    state={\r\n        controls:{ \r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your Email'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    isEmail:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'Password'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            }\r\n        },\r\n        isSignUp:true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    \r\n    inputChangeHandler =(event,controlName)=>{\r\n        // const updatedControls={\r\n        //     ...this.state.controls,\r\n        //     [controlName]:{\r\n        //         ...this.state.controls[controlName],\r\n        //         value:event.target.value,\r\n        //         valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n        //         touched:true\r\n        //     }\r\n\r\n        // };\r\n\r\n        const updatedControls=updateObject(this.state.controls,{\r\n            [controlName]:updateObject(this.state.controls[controlName],{\r\n                value:event.target.value,\r\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            })\r\n        });\r\n\r\n        this.setState({controls:updatedControls});\r\n        // const updatedFormElement={\r\n        //     ...updatedOrderForm[inputIdentifier]\r\n        // };\r\n        // updatedFormElement.value=event.target.value;\r\n        // updatedFormElement.touched=true;\r\n        // updatedFormElement.valid=this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n        // updatedOrderForm[inputIdentifier]=updatedFormElement;\r\n\r\n        // let formIsValid =true;\r\n        // for (let inputIdentifiers in updatedOrderForm){\r\n        //     formIsValid=updatedOrderForm[inputIdentifiers].valid && formIsValid;\r\n        // }\r\n        // // console.log(updatedFormElement);\r\n        // this.setState({controls:updatedOrderForm,formIsValid:formIsValid})\r\n\r\n    }\r\n    onSubmitHandler =(event)=>{\r\n        event.preventDefault();\r\n        // console.log(this.state.controls.email.value,this.state.controls.password.value)\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp)\r\n    }\r\n    switchAuthModeHnadler=()=>{\r\n        this.setState(prevState=>{\r\n            return{isSignUp:!prevState.isSignUp}\r\n        })\r\n    }\r\n\r\n    render (){\r\n        const formElementsArray =[];\r\n        for (let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            })\r\n        }\r\n        let form=formElementsArray.map(formElement =>(\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                touched={formElement.config.touched}\r\n                shouldValidate={formElement.config.validation}\r\n                changed={(event)=>this.inputChangeHandler(event,formElement.id)} />\r\n        ))\r\n\r\n        // const form =formElementsArray.map(formElement=>{\r\n            // <div>hello</div>\r\n            // <Input \r\n            //     key={formElement.id}\r\n            //     elementType={formElement.config.elementType} \r\n            //     elementConfig={formElement.config.elementConfig}\r\n            //     value={formElement.config.value}\r\n            //     invalid={!formElement.config.valid}\r\n            //     touched={formElement.config.touched}\r\n            //     shouldValidate={formElement.config.validation}\r\n            //     changed={(event)=>this.inputChangeHandler(event,formElement.id)}\r\n            // />\r\n        // })\r\n        if(this.props.loading){\r\n            form=<Spinner/>\r\n        }\r\n        let errorMesssage=null;\r\n        if(this.props.error){\r\n            errorMesssage=(\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n        let authRedirect =null;\r\n        if (this.props.isAuthenticated){\r\n            authRedirect=<Redirect to={this.props.authRedirectPath} />\r\n\r\n        }\r\n        return(\r\n            \r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMesssage}\r\n                <form onSubmit={this.onSubmitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">Submit</Button>\r\n\r\n                </form>\r\n                <Button btnType='Danger' clicked={this.switchAuthModeHnadler}>SWITCH TO {this.state.isSignUp?'SIGNIN':'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps =state =>{\r\n    return{\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger:state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) => {\r\n    return{\r\n        onAuth:(email,password,isSignUp)=>dispatch(actions.auth(email,password,isSignUp)),\r\n        onSetAuthRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\r\nimport classes from './Input.module.css'\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses=[classes.InputElement]\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case('textarea'):\r\n            inputElement=<textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case('select'):\r\n            inputElement=(\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option=>(\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                    \r\n                </select>)\r\n            break;\r\n        default:\r\n            inputElement=<input  \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />            \r\n    }\r\n    return(\r\n    <div className={classes.Input}>\r\n        {/* <label className={classes.Label}>{props.label}</label> */}\r\n        {inputElement}\r\n        \r\n    </div>\r\n)};\r\n\r\nexport default Input ;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2QJs_\",\"Label\":\"Input_Label__2EYmk\",\"InputElement\":\"Input_InputElement__1yU-b\",\"Invalid\":\"Input_Invalid__3t_mi\"};"],"sourceRoot":""}